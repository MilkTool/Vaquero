
(def empty ())
(def ys (list 8 6 7 5 3 0 9))
(def alist (list '(x . 1) '(y . 2)))

(test list-access     (and (= ys.0 8) (= ys.3 5) (= ys.6 9)))
(test list-apply      (= (ys 5) 0))
(test list-type       (= ys.type '(list pair)))
(test list-not-null   (= (null? empty) false))
(test list-view       (= ys.view '(8 6 7 5 3 0 9)))
(test list-true       (= ys.to-bool true))
(test list-false      (= empty.to-bool false))
(test list-to-list    (= ys.to-list ys))
(test list-to-set     (= ys.to-set (set 8 6 7 5 3 0 9)))
(test list-to-table   (= alist.to-table (: x 1 y 2)))
(test list-to-vector  (= ys.to-vector (vector 8 6 7 5 3 0 9)))
(test list-head       (= ys.head 8))
(test list-tail       (= ys.tail '(6 7 5 3 0 9)))
(test list-size       (= ys.size 7))
(test list-has?       (= (ys.has? 7) true))
(test list-has?-not   (= (ys.has? 4) false))

(test list-head!
   (= '(b 1)
      (let (xs (list 'a 1))
         (xs.head! 'b)
         xs)))

(test list-tail!
   (= '(a . 2)
      (let (ys (list 'a 1))
         (ys.tail! '2)
         ys)))

(test list-set!
   (= '(1 2 72)
      (let (zs (list 1 2 3))
         (zs.set! 2 72)
         zs)))

