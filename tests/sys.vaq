
; sys.env

(def vetv 'VAQUERO_ENV_TEST_VAR)

(test env-set!
   (seq
      (sys.env.set! vetv "2357")
      (= "2357" (sys.env.get vetv))))

(test env-del!
   (seq
      (sys.env.del! vetv)
      (= null (sys.env.get vetv))))

(test env-hostname
   (let (hostname sys.env.hostname)
      (def from-cli (sys.shell "hostname"))
      (= hostname from-cli)))

(test env-uname
   (let (uname sys.env.uname)
      (def from-cli (sys.shell "uname -a"))
      (def OS uname.head)
      (from-cli.match OS)))

; sys.fs

(test fs-exists?
   (sys.fs.exists? "/"))

(test fs-dir?
   (sys.fs.dir? "/"))

(def dir sys.fs.tmp-dir)

(test fs-tmp-dir
   (sys.fs.exists? dir))

(test fs-cd-pwd
   (seq
      (sys.fs.cd dir)
      (= dir sys.fs.pwd)))

(test fs-mkdir
   (seq
      (sys.fs.mkdir "./foo")
      (sys.fs.exists? "./foo")))

(test fs-ls
   (= '("foo") (sys.fs.ls dir)))

(def file  sys.fs.tmp)
(def fpath (file.split "/"))
(def fname fpath.reverse.head)

(test fs-tmp
   (sys.fs.exists? file))

(test fs-ln
   (seq
      (sys.fs.ln "foo" "bar")
      (sys.fs.exists? "./bar")))

(test fs-cp
   (let (noob (cat "./" fname))
      (sys.fs.cp file noob)
      (sys.fs.exists? noob)))

(test fs-mv
   (seq
      (sys.fs.mv fname "baz")
      (sys.fs.exists? "baz")))

(test fs-symlink?
   (and
      (sys.fs.symlink? "bar")
      (not (sys.fs.symlink? "baz"))))

(test sys-rm
   (seq
      (sys.fs.rm "bar")
      (sys.fs.rm "baz")
      (not (and (sys.fs.exists? "bar") (sys.fs.exists? "baz")))))

(test sys-rmdir
   (seq
      (sys.fs.rmdir "foo")
      (not (sys.fs.exists? "foo"))))

(test sys-read-write
   (let (tmp sys.fs.tmp)
      (def contents '(foo bar baz))
      (def w-handle (sys.fs.write tmp))
      (w-handle.write contents)
      w-handle.close
      (def r-handle (sys.fs.read tmp))
      (def results r-handle.read)
      r-handle.close
      (sys.fs.rm tmp)
      (= contents results)))

(test sys-from-to
   (let (tmp sys.fs.tmp)
      (def contents '(foo bar baz))
      (proc to-proc (handle)
         (handle.write contents))
      (proc from-proc (handle)
         handle.read)
      (sys.fs.to tmp to-proc)
      (def results (sys.fs.from tmp from-proc))
      (sys.fs.rm tmp)
      (= contents results)))

; cleanup
(sys.fs.rm file)
(sys.fs.rmdir dir)

; chroot connect listen socket-pair stat

; sys.net

(test net-http-get
   (let (page (sys.net.http.get "http://anwu.org/"))
      (page.match "A New World, Unordered")))

(test net-tcp
   (let (host "localhost" port 2357)
      (def listener (sys.net.tcp.listen host port))
      (proc sender ()
         (def socket (sys.net.tcp.connect host port))
         (socket.write 'ok)
         socket.close)
      (sys.proc.fork sender)
      (def socket listener.accept)
      (def response socket.read)
      socket.close
      (= response 'ok)))

; sys.proc

; sys.shell

; sys.signal

; sys.srand

; sys.time

; sys.ts

; sys.type

(test sys-type
   (= sys.type '(operating-system-interface)))

