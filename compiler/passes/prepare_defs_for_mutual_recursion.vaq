

(use generic "generic.vaq")

(export transform)

; (seq (def x 1) (def y (proc ...)) ... x ... (y ...) ...)
;   -> (seq (def x null) (def y null) ((send env 'set!) 'x 1) ((send env 'set!) 'y (proc ...)) ... x ... (y ...) ...)

(proc transform (form)
   (proc is-def (form)
      (and (pair? form) (= form.head 'def)))
   (if (pair? form)
      (case form.head
         (seq)
            (let (defs (form.tail.filter is-def))
               (def nulls (map (_ %(def $_.1 null)) defs))
               (def transformed
                  (map
                     (_
                        (if (is-def _)
                           %((send env 'set!) (quote $_.1) $(transform _.2))
                           _))
                     form.tail))
               %(seq @nulls @transformed))
         (def if quote wall gate capture guard fail)
            ((generic.transform form.head) transform form)
         (proc lambda)
            ((generic.transform 'proc-id) transform form)
         else:
            ((generic.transform 'application) transform form))
      form))

