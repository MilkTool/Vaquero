
(test def!
   (= 42
      (wall ()
         (env.def! 'x 42)
         x)))

(test merge!
   (def x-env (wall (x 2) env))
   (def y-env (wall (x 3) env))
   (= '(2 3) (list x-env.x yenv.y)))

(test has?
   (wall (x 23)
      (and
         (env.has? 'x)
         (not (env.has? 'y)))))

(test get
   (= 2
      (let (x 2)
         (env.get 'x))))

(test pairs
   (= '((x . 2) (y . 3))
      (wall (x 2 y 3)
         (list-sort (proc (a b) (< a.head b.head)) env.pairs))))

(test lookup
   (let (x 1)
      (let (y 2)
         (let (z 3)
            (= '(1 2 3) (list (env.lookup 'x) (env.lookup 'y) (env.lookup 'z)))))))

(test parent
   (and
      (let (x 1)
         (let (y 2)
            (and (env.parent.has? 'x) (not (env.parent.has? 'y)))))
      (wall ()
         (is? env.parent null))))

(test extend
   (= '(1 2 3)
      (let (x 1)
         (def my-env (env.extend 'y 2 'z 3))
         (list my-env.x my-env.y my-env.z))))

(test expand
   (= '(if 1 (quote foo) (if 2 (quote bar) (quote baz)))
      (env.expand
         '(cond 1 'foo
                2 'bar
               default: 'baz))))

(test eval
   (= 3
      (let (x 1 y 2)
         (env.eval '(+ x y)))))

(test load
   (def t "(def x 5)")
   (def s t.to-stream)
   (= 5
      (let ()
         (env.load s)
         x)))

