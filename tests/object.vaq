
; simple object

(def simp (object 'a 1 'b 2))

(test obj-type (= simp.type '(object)))
(test message-send (and (= simp.a 1) (= simp.b 2)))
(test object-answers? (and (simp.answers? 'a) (not (simp.answers? 'c))))
(test object-messages (= (list-sort lt simp.messages) '(a b eq? type view)))
(test obj-true (= true simp.to-bool))
(test obj-eq? (and (= simp simp) (!= simp (object 'a 1 'b 2))))

(test object-udo-eq?
   (let ()
      (proc factory (x y z)
         (proc eq-check (other) (and (= x other.foo) (= y other.bar)))
         (object 'foo x 'bar y 'baz z 'eq? eq-check))
      (def x (factory 1 2 3))
      (def y (factory 1 2 5))
      (def z (factory 1 3 3))
      (and (= x y) (!= x z))))

; autoexec

(def otto
    (let (c (cell 3))
        (object
            'var (lambda () c.get)
            'thunky (lambda () (c.set! (+ c.get 1)))
            'thunkle (lambda () (* otto.var 10))
            auto: '(var thunky thunkle))))

(test auto-basic (= otto.var 3))
(test auto-set! (seq otto.thunky (= otto.var 4)))
(test auto-info (= otto.thunkle (* 10 otto.var)))


; forward

(def forwarder
    (object
        'd 4
        forward: (list
            (list simp 'a 'b)
            (list otto 'c 'thunkle))))

(test forward-basic (= forwarder.d 4))
(test forward-simple (= forwarder.a 1))
(test forward-auto (= forwarder.thunkle (* 10 otto.var)))


; default

(def defaulter
    (object
        'e 5
        default: (lambda (msg) (send forwarder msg))))

(test default-basic (= defaulter.e 5))
(test default-parent (= defaulter.d 4))
(test default-ancestor (= defaulter.a 1))
(test default-forward (= defaulter.thunkle (* 10 otto.var)))


