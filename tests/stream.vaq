
(def sexprs "(foo (bar baz)) (quux 2 3)")
(def fb "   foonballardy!!!   ")
(def lines "uno\ndos\ntres")

(test stream-type    (and (= stdin.type 'source) (= stdout.type 'sink)))
(test stream-to-bool (= stdout.to-bool true))
(test input?  (and stdin.input? (not stdout.input?)))
(test output? (and (not stdin.output?) stdout.output?))

(test open?
    (let (p fb.to-stream)
        (def was? p.open?)
        p.close
        (and was? (not p.open?))))

(test stream-read
    (let (p sexprs.to-stream)
        (def first p.read)
        (def second p.read)
        (and
            (= first '(foo (bar baz)))
            (= second '(quux 2 3)))))

(test stream-read-seq
    (= '(seq (foo (bar baz)) (quux 2 3)) sexprs.to-stream.read-seq))

(test stream-read-char
    (let (p fb.trim.to-stream)
        (def r1 p.read-char)
        (def r2 p.read-char)
        (def r3 p.read-char)
        (and (= r1 "f") (= r2 "o") (= r3 "o"))))

(test stream-peek-char
    (let (p fb.trim.to-stream)
        (def r1 p.peek-char)
        (def r2 p.peek-char)
        (def r3 p.read-char)
        (def r4 p.peek-char)
        (and (= r1 "f") (= r2 "f") (= r3 "f") (= r4 "o"))))

(test stream-read-line
    (let (p lines.to-stream)
        (def uno p.read-line)
        (def dos p.read-line)
        (def tres p.read-line)
        (and (= uno "uno") (= dos "dos") (= tres "tres"))))

(test stream-read-lines
    (let (p lines.to-stream)
        (= '("uno" "dos" "tres") p.read-lines)))

(test stream-read-text
    (= lines.to-stream.read-text lines))

(test stream-to-text
    (= lines.to-stream.to-text lines))

(test stream-to-list
    (let (p lines.to-stream)
        (= '("uno" "dos" "tres") p.to-list)))

(test stream-read-n
    (let (p fb.trim.to-stream)
        (def token (p.read-n 4))
        (= token "foon")))

(test stream-read-while
    (let (p fb.trim.to-stream)
        (def token (p.read-while "abdflnory"))
        (= token "foonballardy")))

(test stream-read-until
    (let (p fb.trim.to-stream)
        (def token (p.read-until "!"))
        (= token "foonballardy")))

(test stream-skip-n
    (let (p fb.to-stream)
        (p.skip-n 5)
        (= "o" p.peek-char)))

(test stream-skip-while
    (let (p fb.to-stream)
        (p.skip-while " ")
        (= "f" p.peek-char)))

(test stream-skip-until
    (let (p fb.to-stream)
        (p.skip-until "b")
        (= "b" p.peek-char)))

