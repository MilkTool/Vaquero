#!/usr/local/bin/vaquero run

(use linker-mod "linker.vaq")
(use compiler-mod "compiler.vaq")

(import linker-mod linker)
(import compiler-mod compile)

(everywhere
   (proc slurp-file (f)
      (sys.fs.read-from
         f
         with: (lambda (p) p.read-text)))

   (proc read-file (fname)
      (parse (slurp-file fname)))

   (def macro-env (env.extend () ()))

   (proc expand (sexpr)
      (macro-env.expand sexpr))

   (proc read-expand (fname)
      (def struct (read-file fname))
      (expand struct)))

(proc compile-file (fname)
   (def expanded (read-expand fname))
   (def ok (syntax-ok? expanded))
   (if ok
      (let (linked (linker expanded sys.fs))
         (let (compiled (compile linked))
            (def pwd sys.fs.pwd)
            (def executable-name (fname.replace "\\.vaq$" "")) ; trim .vaq off the end
            ; link runtime and self-executing lambda
            (def schemed
               %(begin
                  (include "runtime.scm")
                  (add-global-prelude (global-env))
                  ($compiled (global-env) the-end top-err)))
            (def tmp-dir sys.fs.tmp-dir)
            (def tmp-file (cat tmp-dir "/compile_me.scm"))
            (sys.fs.write-to tmp-file with: (L (s) (s.write schemed)))
            (def chicken-cmd #(template
               cd {{ tmp-dir }}
               cp -a ~/dev/vaquero/interpreter/* .
               csc -X r7rs -R r7rs -w -O2 -d0 {{ tmp-file }} -o a.out
               cd {{ pwd }}
               mv {{tmp-dir}}/a.out {{ executable-name }}
               # rm -rf {{ tmp-dir }}
            ))
            (sys.shell chicken-cmd)
            executable-name.to-text))
      (fail 'syntax-error)))

(op import-global-prelude ()
   (def expanded (read-expand "prelude.vaq"))
   (when (not (syntax-ok? expanded))
      (fail "Global prelude out of whack?"))
   %(def global-prelude (quote $expanded)))

(import-global-prelude)

(def home-dir              (cat sys.fs.home "/.vaquero"))
(def vaquero-module-dir    (cat home-dir "/modules"))
(def vaquero-expanded-dir  (cat home-dir "/expanded"))
(def vaquero-compiled-dir  (cat home-dir "/compiled"))
(def cli-env env)

(proc start ()
   (def args rest)
   (when (= args.size 0)
      (usage))
   (proc prep-dir (path)
      (when (not (sys.fs.exists? path))
         (sys.fs.mkdir path)))
   (def cmd args.head.to-symbol)
   (prep-dir vaquero-module-dir)
   (prep-dir vaquero-expanded-dir)
   (prep-dir vaquero-compiled-dir)
   (def control (:
      check       vaquero-check
      clean       vaquero-clean
      compile     vaquero-compile
      eval        vaquero-eval-string
      expand      vaquero-expand
      interpret   vaquero-eval
      repl        vaquero-repl
      run         vaquero-run
   ))
   (def handler (control cmd))
   (if handler
      (handler.apply args.tail opt)
      (seq
         (log (cat "Unknown command: " cmd))
         (usage))))

(proc usage ()
   (say #(text
Usage:

vaquero repl
vaquero eval "<code string>"
vaquero run <filename>
vaquero check <filename>
vaquero expand <filename>
vaquero compile <filename>
vaquero interpret <filename>
vaquero clean))
   (sys.proc.exit))

(proc vaquero-repl ()
    (repl (cli-env.extend () ()) stdin stdout stderr))

(proc vaquero-eval-string (str)
   (def expanded (expand (parse str)))
   (cli-env.eval expanded))

(proc vaquero-run (filename)
   ; compile then exec
   (def cfile (compile-file filename))
   (sys.shell (cat with: " " cfile (rest.join " "))))

(proc vaquero-check (filename)
   (def its-good (syntax-ok? (read-expand filename)))
   (say (cat "Vaquero syntax check complete: " (if its-good 'ok 'FAIL))))

(proc vaquero-expand (filename)
   ; expand and print - don't compile or cache
   (write (read-expand filename)))

(proc vaquero-eval (filename)
   (def expanded (read-expand filename))
   (def its-good (syntax-ok? expanded))
   (if its-good
      (cli-env.eval expanded)
      (error 'syntax-error expanded "Syntax error.")))

(proc vaquero-compile (filename)
   ; expand, compile, and cache - don't run
   (def cfile (compile-file filename))
   (say (cat "File " filename " compiled to " cfile ".")))

(proc vaquero-clean ()
   (def mods (sys.fs.ls vaquero-module-dir))
   (def expanded (sys.fs.ls vaquero-expanded-dir))
   (def compiled (sys.fs.ls vaquero-compiled-dir))
   (def prelude  (list (cat home-dir "/prelude.vaq")))
   (def files (append mods expanded compiled prelude))
   (loop go (f files.head fs files.tail)
      (sys.fs.rm f)
      (if fs
         (go fs.head fs.tail)
         'ok)))

(start.apply sys.rest opt: sys.opt)

