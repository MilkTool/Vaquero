
(use gen "generic.vaq")

(export transform)

; (proc (x y z ...) ...) -> (proc (opt x y z ...) ...)
; (<proc> x y foo: 1 z bar: 2 ...) -> (<proc> (record 'foo 1 'bar 2) x y z ...)

(proc transform (form)
   (if (pair? form)
      (case form.head
         (def if quote wall gate guard fail)
            ((gen.transform form.head) transform form)
         (lambda)
            (let (no-opt (gensym "_"))
               %(lambda $form.1 $(pair no-opt form.2) $(transform form.tail.tail.tail.head)))
         (seq capture)
            %($form.head @(map transform form.tail))
         (proc)
            %(proc $form.1 $(pair 'opt form.2) @(map transform form.tail.tail.tail))
         else:
            (let (the-head (transform form.head))
               (if (pair? form.tail)
                  (let (the-tail (map transform form.tail))
                     (loop go (x the-tail.head xs the-tail.tail args () options ())
                        (if (option? x)
                           (let (opts (pair xs.head (pair %(quote $x.to-symbol) options)))
                              (if (pair? xs.tail)
                                 (go xs.1 xs.tail.tail args opts)
                                 %($the-head $(pair 'record opts.reverse) @args.reverse)))
                           (let (yarrrgs (pair x args))
                              (if (pair? xs)
                                 (go xs.head xs.tail yarrrgs options)
                                 %($the-head $(if options (pair 'record @options.reverse) 'null) @yarrrgs.reverse))))))
                  %($the-head null))))
      form))

