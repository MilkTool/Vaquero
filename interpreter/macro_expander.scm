
(define done-been-expanded (mkht))

(define expand-err
    (lambda (ex continue)
        (debug 'compile-error
            (if (and (hash-table? ex) (eq? (vaquero-send-atomic ex 'type) 'error))
                (map (lambda (f) (vaquero-view (vaquero-send-atomic ex f))) '(name form to-text))
                (vaquero-view ex)))
        (exit)))

(define (vaquero-expand code env)
    (define (expand x)
        (vaquero-expand x env))
    (define (punt) (map expand code))
    (define (noob)
        (vaquero-environment env))
    (define (look-it-up x)
        (if (vaquero-global? x)
            (glookup x)
            (lookup env x top-cont expand-err)))
    (define (vaquero-macro? obj)
        (and (hash-table? obj) (eq? (htr obj 'type) 'operator)))
    (define (apply-macro mac code env)
        (let ((arg-pair (prepare-vaquero-args (cdr code))))
             (define args (car arg-pair))
             (define opts (prep-options (cdr arg-pair)))
             (vaquero-expand
                 (vaquero-apply mac args opts top-cont expand-err)
                 env)))
    (if (not (list? code))
        code
        (if (eq? code '())
            '()
            (let ((head (car code)))
                (case head
                    ((use)
                        (if (check-vaquero-use code)
                            (let ((name (cadr code)) (p (make-module-absolute-path (caddr code))))
                                (define re-use
                                    (cons 'use (cons name (cons p (cdddr code)))))
                                (if (hte? done-been-expanded p)
                                    re-use
                                    (begin
                                        (hts! done-been-expanded p #t)
                                        (vaquero-expand-use re-use env))))
                            (exit)))
                    ((import)
                        (if (check-vaquero-import code)
                            (vaquero-expand-import)
                            (exit)))
                    ((export)
                        (if (check-vaquero-export code)
                            (let ((names (cdr code))
                                  (setter! (vaquero-apply-wrapper (vaquero-send-atomic env 'def!))))
                                (setter! 'vaquero-internal-exports names)
                                code)
                            (exit)))
                    ((macro)
                        (let* ((noo-env (noob)) (nucode (map (lambda (c) (vaquero-expand c noo-env)) code)))
                            ((vaquero-compile nucode) env top-cont expand-err)
                            nucode))
                    ((macro-eval)
                        (let ((expanded (expand (cons 'seq (cdr code)))))
                            ((vaquero-compile expanded) env top-cont expand-err)
                            ''macro-eval-was-here))
                    ((seq)
                        (if (check-vaquero-seq code)
                            (let ((expanded (punt)))
                                (prep-defs (cdr expanded) env top-cont expand-err)
                                expanded)
                            (exit)))
                    ((let)
                        (if (check-vaquero-let code)
                           (cons head (vaquero-expand (cdr code) (noob)))
                           (exit)))
                    ((wall)
                        (if (check-vaquero-wall code)
                           (cons head (vaquero-expand (cdr code) (local-env)))
                           (exit)))
                    ((quote)
                        (if (check-vaquero-quote code)
                            code
                            (exit)))
                    (else 
                        (if (symbol? head)
                            (let ((obj (look-it-up head)))
                                (if (vaquero-macro? obj)
                                    (apply-macro obj code env)
                                    (punt)))
                            (if (and (pair? head) (eq? (car head) 'send))
                               (let ((pkg-name (cadr head)) (mac-name (caddr head)))
                                    (if (and (symbol? pkg-name) (pair? mac-name) (eq? (car mac-name) 'quote) (symbol? (cadr mac-name)))
                                       (let ((pkg (look-it-up pkg-name)) (msg (cadr mac-name)))
                                          (if (and
                                                   ; make damn sure it's a package and macro
                                                   (not (eq? pkg not-found))
                                                   (eq? 'package (vaquero-send pkg 'type top-cont expand-err))
                                                   (hte? (htr pkg 'fields) msg)
                                                   (not (eq? will-exist (htr (htr pkg 'fields) msg))))
                                              (let ((mac (vaquero-send-object pkg msg top-cont expand-err)))
                                                 (if (vaquero-macro? mac)
                                                     (apply-macro mac code env)
                                                     (punt)))
                                              (punt)))
                                       (punt)))
                               (punt)))))))))

(define (vaquero-expand-use code env)
   (define package-name (cadr code))
   (define path (caddr code))
   (define prog-env (local-env))
   (define prog (read-expand-cache-prog path prog-env))
   (define use-err
       (lambda (e cont)
           (debug 'use-error e)
           (exit)))
   (define (looker name)
       (lookup prog-env name top-cont use-err))
   (define exports (looker 'vaquero-internal-exports))
   (if (eq? exports not-found)
       #f
       (let ()
           (define def-env! (vaquero-send-atomic env 'def!))
           (define pkg-args
               (let loop ((name (car exports)) (names (cdr exports)) (rval '()))
                   (define nu-rval (cons name (cons (looker name) rval)))
                   (if (null? names)
                       nu-rval
                       (loop (car names) (cdr names) nu-rval))))
           (def-env! package-name (vaquero-object (cons 'type (cons 'package pkg-args)) #f #f #f))))
   code)

(define (vaquero-expand-import code env)
   (define package-name (cadr code))
   (define import-names (cdddr code))
   (define import-err
       (lambda (e cont)
           (debug 'import-error e)
           (exit)))
   (define package (lookup env package-name top-cont import-err))
   (define def-env! (vaquero-send-atomic env 'def!))
   (let loop ((import (car import-names)) (imports (cdr import-names)))
      (def-env! import (vaquero-send-object package import top-cont import-err))
      (if (null? imports)
         code
         (loop (car imports) (cdr imports)))))

