
; operator expansion

(test 'simple-op
    (let ()
        (op foo (x y) (list 'list x y))
        (= (foo 1 2) '(1 2))))

(test 'op-object
    (let ()
        (op brat (x)
            (def foo (object 'a x))
            foo.a)
        (= (brat 1) 1)))

(test 'op-writing-op
    (let ()
        (op mac-on-mac (name body)
            (list 'op name '(x y)
                (list
                    'list
                    '(quote quote)
                    (list 'list 'x 'y body))))
        (mac-on-mac boo 3)
        (mac-on-mac blorg 'meow)
        (and
            (= (boo 1 2) '(1 2 3))
            (= (blorg 4 5) '(4 5 meow)))))

(test 'compile-eval
    (let ()
        (compile-eval
            (def xyz 23) 
            (proc bar (x) (* x x)))
        (op foo (v) 
            %(list $v $xyz $(bar v)))
        (= (foo 7)
          '(7 23 49))))

(test 'op-with-internal-procedure
    (let ()
        (op qux (foon ball)
            (proc bar (x y)
                (list (- x y) (* x y)))
            %(list '$(bar foon ball) '$(bar ball foon)))
        (= (qux 2 3) '((-1 6) (1 6)))))

(test 'op-with-internal-op
    (let ()
        (op bob (n)
            (loop go (x n totes 0)
                (if x.zero?
                    totes
                    (go x.dec (+ x totes)))))
        (= (bob 5) 15)))

(test 'runtime-op ; muhahahaha
    (wall ()
        (op screw-with-proc (f) 
            (list (list 'proc '(x) (list '* 10 f.code.tail.tail.head)) 3)) 
        (proc foo (x) (* x x)) 
        (proc bar (x) (+ x x)) 
        (def fs (list foo bar))
        (= '(9 6 (90 60))
            (list
                (foo 3)
                (bar 3)
                (env.eval (pair 'list (fs.map screw-with-proc)))))))

