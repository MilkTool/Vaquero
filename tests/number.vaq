
(def zero 0)
(def one 1)
(def two 2)
(def pi 3.14)

(test zero?
    (and
        zero.zero?
        (not one.zero?)
        (not pi.zero?)))

(test null?
    (not (or
        (null? zero)
        (null? one)
        (null? pi))))

(test int-type
    (and
        (= '(int number) zero.type)
        (= '(int number) one.type)))

(test real-type
    (= '(real number) pi.type))

(test to-bool
   (and zero.to-bool.not
        one.to-bool
        pi.to-bool))

(test to-text
    (and
        (= zero.to-text "0")
        (= one.to-text "1")
        (= pi.to-text "3.14")))

(test = (= one 1))

(test +
    (and
        (= 1 (+ zero one))
        (= 3 (+ one two))
        (= 2 (+ 3 -1))))

(test -
    (and
        (= 1 (- 1 0))
        (= 0 (- 1 1))
        (= 7 (- 5 -2))))

(test *
    (and
        (= 25 (* 5 5))
        (= -4 (* 4 -1))
        (= 4 (* -2 -2))))

(test /
    (and
        (= 4 (/ 8 2))
        (= -4 (/ 8 -2))
        (= -4 (/ -8 2))
        (= 4 (/ -8 -2))))

(test > (> 2 1))
(test >= (and (>= 2 1) (>= 2 2)))
(test < (< 1 2))
(test <= (and (<= 1 2) (<= 1 1)))

(test div (= 3 (div 7 2)))
(test rem-pos (= 1 (rem 7 2)))
(test mod-pos (= 1 (mod 7 2)))
(test rem-neg (= -1 (rem -7 2)))
(test mod-neg (= 1 (mod -7 2)))

(test abs
   (let (x -7 y -1.618)
      (and
         (= x.abs 7)
         (= y.abs 1.618))))

(test pos?
   (and pi.pos?
        one.pos?))

(test neg?
   (and pi.neg?.not
        one.neg?.not))

(test even?
   (let (x 2 y 3)
      (and x.even? y.even?.not)))

(test odd?
   (let (x 2 y 3)
      (and x.odd?.not y.odd?)))

(test inc
   (and
      (= zero.inc 1)
      (= one.inc  2)))

(test dec
   (and
      (= zero.dec -1)
      (= one.dec   0)))

(test floor (= pi.floor 3))
(test ceil (= pi.ceil 4))

