
(def empty (vector))
(def vick (vector 8 6 7 5 3 0 9))
(def veck (vector 3 2 1))

(test vector-access (and (= vick.0 8) (= vick.3 5) (= vick.6 9)))
(test vector-apply (= (vick 5) 0)) 

(test vector-type        (= vick.type '(vector)))
(test vector-true        (= vick.to-bool true))
(test vector-false       (= empty.to-bool false))
(test vector-to-list     (= vick.to-list '(8 6 7 5 3 0 9)))
(test vector-to-set      (= vick.to-set (set (0 . 8) (1 . 6) (2 . 7) (3 . 5) (4 . 3) (5 . 0) (6 . 9))))
(test vector-to-table    (= vick.to-table (: 0 8 1 6 2 7 3 5 4 3 5 0 6 9)))
(test vector-to-vector   (= vick.to-vector (vector 8 6 7 5 3 0 9)))
(test vector-pairs       (= veck.pairs (list '(0 . 3) '(1 . 2) '(2 . 1))))
(test vector-size        (= vick.size 7))
(test vector-has?        (= (vick.has? 7) true))
(test vector-has?-not    (= (vick.has? 4) false))
(test vector-set!        (seq (veck.set! 1 9) (= 9 veck.1)))

;(test vector-fold
;    (= (vick.fold
;            0
;            (lambda (acc x) (+ acc x))) 38))

;(test vector-reduce
;    (= (vick.reduce
;            0
;            (lambda (acc x) (+ acc x))) 38))

;(test vector-map
;    (= (vick.map
;            (lambda (x) (* 10 x)))
;            #(vector 80 60 70 50 30 0 90)))

;(test vector-filter (= (vick.filter (lambda (x) (> x 5))) #(vector 8 6 7 9)))
;(test vector-sort-< (= (vick.sort <) #(vector 0 3 5 6 7 8 9)))
;(test vector-sort-> (= (vick.sort >) #(vector 9 8 7 6 5 3 0)))


