
(export transform)

(proc transform-q (transform form) form)

(proc transform-1 (transform form)
   %($form.head @(map transform form.tail)))

(proc transform-2 (transform form)
   %($form.head $form.1 @(map transform form.tail.tail)))

(proc transform-3 (transform form)
   %($form.head $form.1 $form.2 @(map transform form.tail.tail.tail)))

(proc transform-if (transform form)
   %(if $(transform form.1) $(transform form.2) $(transform form.3)))

(proc transform-env (transform form)
   (def let-or-wall form.head)
   (def vars form.1)
   (def transformed-vars
      (if vars
         (loop go (var vars.head val vars.1 others vars.tail.tail trans '())
            (def noob (pair (transform val) (pair var trans)))
            (if others
               (go others.head others.tail others.tail.tail noob)
               noob.reverse))
         ()))
   %($let-or-wall $transformed-vars @(map transform form.tail.tail)))

(proc transform-n (transform form)
   (pair (transform form.head) (map transform form.tail)))

(def transform
   (:
      def          transform-2
      if           transform-if
      quote        transform-q
      seq          transform-1
      lambda       transform-2
      proc         transform-2
      proc-id      transform-3
      let          transform-env
      wall         transform-env
      gate         transform-1
      capture      transform-2
      guard        transform-1
      fail         transform-1
      application  transform-n))

